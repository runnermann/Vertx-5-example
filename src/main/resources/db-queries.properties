#
#  Copyright (c) 2017 Red Hat, Inc. and/or its affiliates.
#  Copyright (c) 2017 INSA Lyon, CITI Laboratory.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# --------------------------------------------------------------------- #
#                   DATABASE PRINCIPLES OF ORGANIZATION
# --------------------------------------------------------------------- #
# We organize data for use in graphs and for normalized DB operations   #
# When it advantagous to use a graph for organization, we divide the data
# into things, e.g. certificates, programs, instituions, persons, students,
# etc... We create edges basad on relationships between things and other
# things. This is not strict. This is primarily on a many to one or many
# to many relationship. E.G. A certificate likely only has one institute
# that grants that certificate. This is a one to one relationship and is
# simply shown in the child thing. Where many people would be granted a
# certificate, then we create an edge such as Edge_cert_person. This is
# a many to one relationship.  

db-rollback=ROLLBACK;

upsert-mil-service=BEGIN; INSERT INTO public.mil_service (person_id, status, country, branch, rank, gender, from_yr, to_yr) \
VALUES ((SELECT person_id FROM emailhash WHERE hash = ? ), ?, ?, ?, ?, ?, ?, ?) ON CONFLICT (person_id) \
DO UPDATE SET status=?, country = ?, branch = ?, rank = ?, gender = ?, from_yr = ?, to_yr = ?; \
COMMIT;

upsert-mil-image=BEGIN; \
INSERT INTO img_mil_service AS ms (person_id, img_no, caption) \
    VALUES ((select e1.person_id FROM public.emailhash e1 WHERE hash = ?), ?, ?) \
ON CONFLICT (person_id,img_no) DO UPDATE \
    SET caption = ? \
WHERE ms.person_id = (SELECT eh.person_id FROM emailhash eh WHERE hash = ?); \
END;

update-mil-image-2=UPDATE mil_service SET photo_2 = ?, descript_2 = ? \
WHERE person_id = (SELECT person_id FROM emailhash WHERE hash = ?);

insert-industry-data=BEGIN; \
INSERT INTO public.entity (name, description, website) VALUES (?, ?, ?) ON CONFLICT (website) DO NOTHING; \
SELECT entity_id FROM public.entity WHERE website = ?; \
COMMIT;
insert-por-employer=BEGIN; \
    WITH entityData AS (INSERT INTO public.entity (name, website) VALUES (?, ?) ON CONFLICT (website) DO NOTHING RETURNING entity_id), \
    un AS (SELECT entity_id FROM entityData UNION SELECT entity_id FROM public.entity WHERE website = ?), \
    ep AS (INSERT INTO public.entity_person(user_hash, entity_id, start_date, relation) VALUES (?, (SELECT entity_id FROM un), ?, ?) ON CONFLICT (user_hash, entity_id) DO NOTHING), \
    porData AS (INSERT INTO public.por (por_name, start_date, description, entity_id) VALUES (?, ?, ?, (SELECT entity_id FROM un)) ON CONFLICT (por_name, entity_id) DO NOTHING RETURNING por_id), \
    poun AS (SELECT por_id FROM porData UNION SELECT por_id FROM public.por WHERE por_name LIKE ? AND entity_id = (SELECT entity_id FROM un)) \
    INSERT INTO public.por_person (por_id, user_hash, start_date, value) VALUES ((SELECT por_id FROM poun), ?,?,? ) ON CONFLICT (por_id, user_hash) DO NOTHING; \
COMMIT;
# Institution & website & program_website, certificate, hours calc, major, minor, specialization
upsert-ed-general=BEGIN; WITH p AS (SELECT person_id FROM emailhash WHERE hash = ?), \
i AS ( INSERT INTO institute (name, website) VALUES (?, ?) ON CONFLICT (website) DO UPDATE SET name = ?, website = ? RETURNING institute_id ), \
prog AS ( INSERT INTO public.program (institute_id, program_name, program_website) VALUES ((SELECT institute_id FROM i), ?, ?) ON CONFLICT (program_website) DO NOTHING RETURNING program_id ), \
un_prog AS (SELECT program_id FROM prog UNION SELECT institute_id FROM public.institute WHERE website = ?), \
cert AS ( INSERT INTO public.certificate (institute_id, cert_name, field, created_by_id) VALUES ((SELECT institute_id FROM i), ?, ?, (SELECT person_id FROM p)) \
ON CONFLICT (institute_id, cert_name, field) DO NOTHING RETURNING cert_id ), \
un_cert AS (SELECT cert_id FROM cert UNION SELECT cert_id FROM public.certificate WHERE institute_id = (SELECT institute_id FROM i) AND cert_name = ? AND field = ?), \
stud AS ( INSERT INTO public.education (person_id, education_level, major, minor, specialization) VALUES ((SELECT person_id FROM p), ?, ?, ?, ?) \
ON CONFLICT (person_id) DO UPDATE SET education_level = ?, major = ?, minor = ?, specialization = ?), \
cert_p AS ( INSERT INTO public.edge_cert_person (person_id, cert_id, created_by_pid) VALUES ((SELECT person_id FROM p), (SELECT cert_id FROM un_cert), (SELECT person_id FROM p)) ON CONFLICT (person_id, cert_id) DO NOTHING) \
INSERT INTO public.edge_program_person (person_id, cert_id, start_date, end_date) VALUES ((SELECT person_id FROM p), (SELECT cert_id FROM cert), ?, ?); COMMIT;

insert-knocscore-donatetrx=INSERT INTO public.knockickdonated (stripe_trx_id, object, email, name, amount, status) VALUES (?,?,?,?,?,?);
select-prekick-metrics=SELECT k1.emailcount, k1.corporateCount, r1.amount \
    FROM (SELECT COALESCE(SUM(amount)) amount FROM knockickdonated) r1, \
    (SELECT COUNT(DISTINCT email) as emailcount, COUNT(*) FILTER (WHERE type != 'individual') as corporateCount FROM email_prekick_signup) k1;
select-prekick-backers=SELECT DISTINCT ON(e1.email) e1.email, k1.sum, e1.name, e1.employer, e1.type \
    FROM email_prekick_signup e1 FULL JOIN (SELECT DISTINCT ON (email) email, sum(amount) sum FROM knockickdonated GROUP BY email) k1 on e1.email = k1.email \
    WHERE e1.make_public = 'true';

create-users-table=create table if not exists students (uuid integer primary key, username varchar(255) unique, \
  email varchar(255), password varchar(255), password_salt varchar(255));
create-userfmappreq=BEGIN; \
     INSERT INTO students(email, username, password, password_salt, hash, reset_code) \
        VALUES (?, ?, ?, ?, ?, ?); \
     INSERT INTO EmailHash(hash, email) VALUES(?, ?); \
     INSERT INTO Person (first_name, orig_email, current_email) VALUES(?, ?, ?);  \
     INSERT INTO Account (account_id, orig_email, catagory) VALUES (lastVal(), ?, 'free'); \
     INSERT INTO Student (orig_email) VALUES (?); \
 COMMIT;
create-user=BEGIN; \
     INSERT INTO students(email, username, password, password_salt, hash) \
        VALUES (?, ?, ?, ?, ?); \
     INSERT INTO EmailHash(hash, email) VALUES(?, ?); \
     INSERT INTO Person (first_name, orig_email, current_email) VALUES(?, ?, ?);  \
     INSERT INTO Account (account_id, orig_email, catagory) VALUES (lastVal(), ?, 'free'); \
     INSERT INTO Student (orig_email) VALUES (?); \
 COMMIT;
create-knoc-user=BEGIN; \
INSERT INTO knoc_code(x1, x2, x3) VALUES (?,?,?); \
INSERT INTO Person (first_name, last_name, orig_email, current_email, hash) VALUES(?,?,?,?,?); \
INSERT INTO emailhash(hash, email, person_id) values (?, ?, (SELECT currval('person_id_seq'))); \
COMMIT;
insert_predicessorchain=INSERT INTO PredecessorChain(user_hash, origin_hash, gp_hash, gp_rep_hash, prev_hash) \
    VALUES (?, \
        (SELECT origin_hash FROM PredecessorChain WHERE user_hash = ?), \
        (SELECT gp_hash FROM PredecessorChain WHERE user_hash = ?), \
        (SELECT gp_rep_hash FROM PredecessorChain WHERE user_hash = ?), \
        ?);
insert_visitor=INSERT INTO visitor(endpoint, loc, referrer, event, user_agent) VALUES(?, ?, quote_nullable( ? ), quote_nullable( ? ), quote_nullable( ? ));
insert_transaction=INSERT INTO transaction(stripe_charge_id, author_hash, distributor_hash, payer_hash, item_id, item_descript, type_payment, amount, fee, status, notes, creator_pay, distro_pay) \
 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
# user_hash, deck_id, amount, study_time, create_time
upsert-userdeckstats-amount=INSERT INTO public.UserDeckStats AS t1 \
    VALUES(?, ?, ?, 0, 0) \
    ON CONFLICT ON CONSTRAINT userdeckstats_deck_id_user_hash_key \
        DO UPDATE SET amount = t1.amount + ?;

insert_payment_recieved=INSERT INTO P_P_Recieved(trans_id, payer_id, add_date, date, amount, tax, fee) VALUES (?, ?, ?, ?, ?, ?);
insert_purchased_childdeck= \
BEGIN TRANSACTION; \
    INSERT INTO deckmetadata (user_email, creator_email, deck_name, course_id, parent_deck, deck_photo, last_date, create_date, deck_descript, deck_school, deck_book, \
    deck_class, deck_prof, subj, section, sub_section, deck_language, test_types, num_cards, num_imgs, num_video, num_audio, \
    deck_numstars, num_users, deck_numraters, session_count, price, course_code, share_distro, full_name, user_hash) \
    SELECT ?, creator_email, deck_name, course_id, deck_id, deck_photo, last_date, create_date, deck_descript, deck_school, deck_book, \
    deck_class, deck_prof, subj, section, sub_section, deck_language, test_types, num_cards, num_imgs, num_video, num_audio, \
    deck_numstars, num_users + 1, deck_numraters + 1, session_count, price, course_code, share_distro, ?, ? \
    FROM deckmetadata \
    WHERE deck_id = ? \
  ON CONFLICT ON CONSTRAINT unique_two_column DO NOTHING; \
    UPDATE deckmetadata SET num_users = num_users + 1 \
    WHERE deck_id = ?; \
COMMIT;

fetch_childdeck_exists=SELECT * FROM public.deckmetadata WHERE parent_deck = ? AND user_email = ?;
#VideoChat meetings related
insert_videochat_host=INSERT INTO public.videochatmeetings (host_hash, meeting_type, meeting_time, subject, deck_subj, section, platform_fee, req_duration, meeting_code) VALUES (?,?,?,?,?,?,?,?,?) RETURNING meeting_id;
insert_videochat_attendee=INSERT INTO public.meetingattendees (meeting_id, attendee_email, host_fee) VALUES (?, ?, ?);
fetch_videochat_pcode=SELECT passcodeenc FROM videochat;

# Admin related
insert_note_person=INSERT INTO noteperson(orig_email, note) VALUES(?, ?);
insert_note_system=INSERT INTO NoteSystem(note) VALUES(?, ?);
# insert user requests to download the FMApp
insert_fm_app_req=INSERT INTO AppRequest(email, loc, os_type) VALUES (?, ?, ?);
# Insert a users subscription payment into two Account and membershipfee
# catagory, millis, stripe_cusid, orig_email, tax, subscription_fee, balance
insert-fee-pay=INSERT INTO membershipfee VALUES (DEFAULT,DEFAULT,?,?,?,?);
# do insert or update, the last, NOTE that we add the
# 5th and 6th variables to the corosponding wildcards
# in the calling method's JsonArray
upsert-user-code=INSERT INTO students(reset_code, set_time, email, username) VALUES( ?, ?, ?, ?) \
  ON CONFLICT (email) DO UPDATE SET reset_code = ?, set_time = ?;
save-user=UPDATE students SET username = ?, password = ?, password_salt = ?, email = ?, WHERE uuid = ?;
set-code=UPDATE students SET reset_code = ?, set_time = ? WHERE email = ?;
update-pw=UPDATE students SET password = ?, password_salt = ? WHERE email = ?;
update-student=UPDATE students SET username = ?, password = ?, password_salt = ?, hash = ? WHERE email = ?;
update-finalize-user=BEGIN; \
     INSERT INTO PredecessorChain(user_hash, origin_hash, gp_hash, gp_rep_hash, prev_hash) \
        VALUES (?, ?, ?, ?, ?) \
        ON CONFLICT (user_hash) DO NOTHING; \
     INSERT INTO EmailHash(hash, email) VALUES(?, ?); \
     INSERT INTO Person (first_name, orig_email, current_email) VALUES(?, ?, ?);  \
     INSERT INTO Account (account_id, orig_email, catagory) VALUES (lastVal(), ?, 'free'); \
     INSERT INTO Student (orig_email) VALUES (?); \
 COMMIT;
subscript_cancel=UPDATE Account SET catagory = 'free', cancel_date = (now() at time zone 'PST'), cancel_reason = ? WHERE orig_email = quote_nullable( ? );
subscript-cancel-on-id=UPDATE account SET catagory = 'free', cancel_date = (now() at time zone 'PST'), trial_end = (now() at time zone 'PST'), cancel_reason = ? WHERE stripe_cusid = ?;
subscript_start=UPDATE Account SET stripe_subid = ?, begin_date = (now() at time zone 'PST') WHERE stripe_cusid = ?;
update-subscription=UPDATE account SET catagory = ?, stripe_cusid = ?, account_status = ?, paid_date = CURRENT_DATE \
  WHERE orig_email = ?;
update-subscript-trial-on-id=UPDATE Account SET catagory = ?, account_status = ?, trial_end = ?  WHERE stripe_cusid = ?;
update-subscript-on-id=UPDATE Account SET catagory = ?, account_status = ?  WHERE stripe_cusid = ?;
update-account-stripe-id=UPDATE Account SET stripe_acct_id = ? WHERE orig_email = ?;

# SELECT STATEMENTS
all-users-decks=SELECT * FROM deckmetadata WHERE user_email = ?;
fetch-decks-by-subject=SELECT FROM deckmetadata where subject = ?;
get-user-by-email=SELECT uuid, email, password_salt from students where email = ?;
get-user-by-id=SELECT * from students where uuid = ?;
fetch-hasPurchased=SELECT deck_id FROM deckmetadata WHERE parent_deck = ? AND user_email = ?;
fetch-user-hash=SELECT hash FROM students WHERE email = ?;
fetch-user-stats=SELECT DISTINCT ON(r1.deck_subj) r1.deck_subj,COALESCE(SUM(r1.amount),0) AS amount,COALESCE(SUM(r1.create_time),0) AS create_time,COALESCE(SUM(r1.review_test_time),0) AS review_test_time, \
                                 r1.req_duration,r1.pract_duration,r1.create_date,r1.last_Date, \
                                 r2.first_name,r2.last_name,r2.major,r2.minor,r2.institution,r2.descript,r2.join_date,r2.public, \
                                 r3.status,r3.country,r3.branch,r3.rank,r3.gender,r3.from_yr,r3.to_yr,r3.caption_1,r3.caption_2, \
                                 r4.athlete_descript,r4.athl_caption_1, r4.athl_caption_2, r4.athl_caption_3 \
    FROM (((SELECT t1.subj AS deck_subj, t2.amount, t2.create_time, t2.review_test_time, t1.create_date, t1.last_date FROM deckmetadata t1 JOIN userDeckStats t2 USING(deck_id) WHERE t2.user_hash = ? AND t1.subj NOT LIKE '' ) f1 \
        FULL JOIN (SELECT v1.deck_subj, SUM(v1.req_duration) AS req_duration FROM meetingattendees m1 JOIN videochatmeetings v1 USING(meeting_id) WHERE m1.email_hash = ? AND v1.deck_subj NOT LIKE '' group by v1.deck_subj ) v2 USING(deck_subj)) i1 \
        FULL JOIN (SELECT deck_subj, SUM(duration) AS pract_duration FROM public.practicalmetrics p1 WHERE p1.user_hash = ? AND p1.deck_subj NOT LIKE '' group by p1.deck_subj ) p1 USING(deck_subj) ) r1, \
     (SELECT DISTINCT p1.first_name, p1.last_name, s1.major, s1.minor, p1.institution, p1.descript, p1.join_date, p1.public_requested AS public, p1.person_id FROM Person p1 NATURAL JOIN STUDENT s1 NATURAL JOIN emailhash eh1 WHERE eh1.person_id = p1.person_id ) r2, \
     LATERAL (SELECT status,country,branch,rank,gender,from_yr,to_yr,im1.caption AS caption_1 ,im2.caption as caption_2 \
              FROM public.mil_service ms \
                  JOIN public.img_mil_service im1 ON ms.person_id = im1.person_id AND im1.img_no = 0 \
                  JOIN public.img_mil_service im2 ON ms.person_id = im2.person_id AND im2.img_no = 1 \
                WHERE ms.person_id = r2.person_id) r3, \
    LATERAL (SELECT a1.description athlete_descript, ia_1.caption AS athl_caption_1, ia_2.caption AS athl_caption_2, ia_3.caption AS athl_caption_3 \
             FROM public.athlete a1 \
                      JOIN public.img_athlete ia_1 ON a1.person_id = ia_1.person_id AND ia_1.img_no = 0 \
                      JOIN public.img_athlete ia_2 ON a1.person_id = ia_2.person_id AND ia_2.img_no = 1 \
                      JOIN public.img_athlete ia_3 ON a1.person_id = ia_3.person_id AND ia_3.img_no = 2 \
             WHERE a1.person_id = r2.person_id) r4 \
    GROUP BY r1.deck_subj, r2.first_name, r2.last_name, r2.major, r2.minor, r2.institution, r2.descript, r2.join_date, r2.public, r1.req_duration, r1.pract_duration, r1.create_date, r1.last_Date, \
        r3.status, r3.country, r3.branch, r3.rank, r3.gender, r3.from_yr, r3.to_yr, r3.caption_1, r3.caption_2, r4.athlete_descript, r4.athl_caption_1, r4.athl_caption_2, r4.athl_caption_3;

# stats
fetch-stats-achievement=SELECT a1.achievement_name AS name, a1.achievement_descript AS description, a1.value_paid::money::varchar AS "value", a1.domain_id AS domain FROM Achievement a1 JOIN Achievement_Person a2 on a1.achieve_id = a2.achieve_id WHERE a2.user_hash = ? AND ? = ANY (a2.domain_ids);
fetch-stats-athletics=SELECT url_links FROM achievement_athletic WHERE person_id = (select person_id FROM emailhash where hash = ?);

upsert-athlete=BEGIN; \
INSERT INTO athlete AS ms (person_id, description) \
VALUES ((select e1.person_id FROM public.emailhash e1 WHERE hash = ?), ?) \
ON CONFLICT (person_id) DO UPDATE \
SET description = ? \
WHERE ms.person_id = (SELECT eh.person_id FROM emailhash eh WHERE hash = ?); \
END;

upsert-athlete-image=BEGIN; \
INSERT INTO img_athlete AS ia (person_id, img_no,caption) \
VALUES ((select e1.person_id FROM public.emailhash e1 WHERE hash = ?), ?, ?) \
ON CONFLICT (person_id,img_no) DO UPDATE \
SET caption = ? \
WHERE ia.person_id = (SELECT eh.person_id FROM emailhash eh WHERE hash = ?); \
END;

update-bio=UPDATE public.person SET descript = ? WHERE hash = ?;

fetch-stats-entity=SELECT e1.name, e1.description, ep1.domains, ep1.relation, e1.rating, e1.rating_reason as "rating reason", ep1.income_total::money::varchar as "value" FROM entity e1, entity_person ep1 WHERE ep1.user_hash = ? AND ? = ANY (ep1.domains) AND e1.entity_id = ep1.entity_id ORDER BY rating DESC;
fetch-stats-positions=SELECT e1.name AS company, p1.por_name as Position, p1.description, p2.num_reports as reports, p2.value::money::varchar AS "value", p2.start_date as start, p2.end_date as end, p2.domains, \
(SELECT String_agg(name, ', ') FROM public.Projects WHERE Projects.proj_id = ANY(p2.project_ids)) AS projects, \
(SELECT string_agg(Achievement.achievement_name, ', ') FROM public.Achievement WHERE Achievement.achieve_id = ANY(p2.achievement_ids)) AS achievements \
FROM POR p1 JOIN POR_Person p2 ON p1.por_id = p2.por_id, Entity e1 \
WHERE p2.user_hash = ? AND ? = ANY (p2.domains) AND e1.entity_id = p1.entity_id \
GROUP BY p1.por_id, p1.entity_id, p1.description, p1.por_name, p2.num_reports, p2.value, p2.start_date, p2.end_date, p2.domains, e1.name, p2.project_ids, p2.achievement_ids;
fetch-stats-projects=SELECT p1.name as "Project Name", p1.description, p1.value::money::varchar as "value", p2.position, p2.start_date as start, p2.end_date as end, p2.domain_ids, p1.status, p1.result \
FROM Projects p1 JOIN Project_Person p2 ON p1.proj_id = p2.proj_id WHERE p2.user_hash = ? AND ? = ANY (p2.domain_ids);
fetch-stats-people=SELECT p2.first_name, p2.last_name, ppe.relation, ppe.domain_list FROM person_person_edge ppe JOIN person p2 ON (ppe.person2_id = p2.person_id) JOIN person p1 ON (p1.person_id = ppe.person1_id)  WHERE p1.hash = ? AND ? = ANY (ppe.domain_list);
fetch-stats-knowledge=WITH RECURSIVE traversed AS ( SELECT kv.domain_name AS domain, kpe.person_id, kpe.time AS hours, kpe.points, ke.know_id AS node_id, 1 AS depth, ARRAY[ke.parent_know_id] AS path \
    FROM knowledge_edge ke NATURAL JOIN knowledge_verticies kv NATURAL JOIN know_person_edge kpe, person p WHERE p.person_id = kpe.person_id AND p.hash = ? AND kpe.know_id = ke.know_id AND kv.domain_name = ? \
    UNION ALL \
    SELECT kv.domain_name, kpe.person_id, kpe.time, kpe.points, te.know_id, te.depth + 1, te.path || te.parent_know_id FROM (traversed JOIN knowledge_edge ke ON ke.parent_know_id = traversed.node_id) te \
    JOIN knowledge_verticies kv ON kv.know_id = te.know_id JOIN know_person_edge kpe ON kpe.person_id = te.person_id AND kpe.know_id = te.know_id WHERE NOT te.know_id = ANY(te.path) \
    AND te.depth < 100 ) SELECT DISTINCT domain, hours, points AS "Study | Self Testing" FROM traversed ORDER BY hours desc;
# -- end stats
fetch-members-list=SELECT hash, first_name, middle_name, last_name FROM person WHERE hash IS NOT NULL AND public_requested = true ORDER BY first_name;

fetch-code=SELECT reset_code, set_time FROM students WHERE email = ?;
fetch-subscript-id=SELECT stripe_subid FROM Account WHERE orig_email = ?;
fetch-strip-id=SELECT stripe_acct_id FROM Account WHERE orig_email = ?;
fetch-member-status=SELECT account_status, catagory, stripe_acct_id, stripe_cusid, paid_date FROM Account WHERE orig_email = ?;
fetch-all-jobs=SELECT job_id, job_position, employment_type, duration, job_location, remote FROM Job;
fetch-job-by-id=SELECT * FROM Job WHERE job_id = ?;
# FM website internal employee-team
fetch-team=SELECT DISTINCT Person.person_id, Person.first_name, Person.last_name, Person.photo_link, Person.descript, Employee.job_position \
  FROM Employee NATURAL JOIN Person WHERE employment_type = 'exec' \
  ORDER BY Person.person_id;
fetch-predecessor-user=SELECT origin_hash, gp_hash, gp_rep_hash, prev_hash \
  FROM PredecessorChain WHERE user_hash = ?;
fetch-student=SELECT DISTINCT p1.first_name, p1.last_name, s1.major, s1.minor, p1.institution, p1.descript \
    FROM Person p1 NATURAL JOIN STUDENT s1 JOIN emailhash e1 ON p1.orig_email = e1.email \
    WHERE e1.hash = ?;
qr-fetch-campaign=WITH k AS ( \
        UPDATE CampaignGrowKey \
            SET visits = visits+1 \
            WHERE ckey_id = ? \
            RETURNING person_id, cg_id) \
        SELECT cg.html_1, cg.intro_text, cg.subscribe_text, cg.follow_text1, cg.follow_text2, p.avatar_name, p.photo_link \
            FROM public.CampaignGrow cg, Person p \
            WHERE cg.cg_id = (SELECT cg_id FROM k) AND p.person_id = (SELECT person_id FROM k); 
insert-email-prekick=INSERT INTO email_prekick_signup (email,name,employer,type,make_public) VALUES (?,?,?,?,?);
insert-campaign-keyclick=INSERT INTO Campaign_key_click_location(ckey_id, loc) VALUES (?,?);
upsert-email-bounced=INSERT INTO public.email_tracking(email, bounced, note) \
    VALUES(?, ?, ?) ON CONFLICT (email) DO UPDATE SET bounced = ?, note = ?, date_response = CURRENT_TIMESTAMP;
upsert-email-opened=INSERT INTO public.email_tracking(email, opened, note) \
    VALUES(?, ?, ?) ON CONFLICT (email) DO UPDATE SET opened = ?, note = ?, date_response = CURRENT_TIMESTAMP;
upsert-email-complaint=INSERT INTO public.email_tracking(email, complaint, note) \
    VALUES(?, ?, ?) ON CONFLICT (email) DO UPDATE SET complaint = ?, note = ?, date_response = CURRENT_TIMESTAMP;
upsert-email-optout=INSERT INTO public.email_tracking(email, optout) \
    VALUES(?, ?) ON CONFLICT (email) DO UPDATE SET optout = ?, date_response = CURRENT_TIMESTAMP;
fetch-bulk-email-reqs=SELECT u1.email, s1.username	\
    FROM (((SELECT email FROM students s1) UNION (SELECT email FROM apprequest)) \
    EXCEPT (SELECT email FROM email_tracking)) AS u1 LEFT JOIN students s1 ON u1.email = s1.email;
fetch-emails-other=SELECT u1.email, s1.username \
    FROM (((SELECT email FROM emails_aquired s1) UNION (SELECT email FROM apprequest)) \
    EXCEPT (SELECT email FROM email_tracking)) AS u1 LEFT JOIN students s1 ON u1.email = s1.email;
fetch-emails-diff=SELECT DISTINCT ON (u1.email) u1.email, s1.username \
    FROM (((SELECT email FROM emails_aquired s1) UNION (SELECT email FROM apprequest)) \
    EXCEPT (SELECT email FROM email_tracking \
    WHERE bounced = true \
    OR optout = true)) AS u1 LEFT JOIN students s1 ON u1.email = s1.email \
    ORDER BY u1.email ASC;
fetch-emails-all=SELECT u1.email


# Pay related non shared
#fetch-deck-purchase-details=SELECT DISTINCT m1.price, m1.creator_email, m1.share_distro, a1.stripe_acct_id \
#   FROM DeckMetadata m1, Account a1 \
#   WHERE m1.deck_id = ? AND m1.creator_email = a1.orig_email;
# Pay related for shared, includes author and re-distributor, also provides subscription status and fee info
fetch-deck-purchase-details=SELECT DISTINCT m1.price, m1.creator_email, m1.user_email, m1.share_distro, m1.full_name, \
  a1.stripe_acct_id, a1.account_status, a1.paid_date, a1.currency, \
  a2.stripe_acct_id, a2.account_status, a2.paid_date, a2.currency, \
  a3.account_status, a3.paid_date, a3.currency, a3.fee, a4.hash \
  FROM DeckMetadata m1, Account a1, Account a2, Students a4, (Account NATURAL JOIN PurchaseFeeSched) AS a3 \
  WHERE m1.deck_id = ? AND \
  m1.creator_email = a1.orig_email AND \
  m1.user_email = a2.orig_email AND \
  a3.orig_email = ? AND \
  a4.email = ?;
qr-fetch-deck-name-price=SELECT m.create_date, m.last_date, m.deck_name, m.price, m.user_email, m.creator_email, m.deck_photo, m.deck_descript,\
       m.deck_school, m.deck_prof, m.subj, m.deck_class, m.section, m.num_cards, m.num_imgs, m.num_video, m.num_audio,\
       m.deck_numstars, m.deck_numraters, m.course_code, m.num_users, m.session_count, m.user_hash, f.fee, p.join_date,\
       p.descript, p.avatar_name, p.photo_link, p.public_requested AS dist_public, p.first_name AS dist_first, p.last_name AS dist_last,\
       p.institution AS dist_tut,\
       c.public_requested AS creator_public, c.first_name AS creator_first, c.last_name AS creator_last, c.photo_link AS creator_photo,\
       c.institution AS creator_tut \
    FROM public.DeckMetadata m JOIN person p ON m.user_email = p.orig_email, PurchaseFeeSched AS f, person c \
    WHERE m.deck_id = ? AND f.catagory = 'free' AND c.orig_email = m.creator_email;
fetch-videochat-meeting=SELECT meeting_type, meeting_time, req_duration, host_hash, meeting_code FROM videochatmeetings WHERE meeting_id = ?;
fetch-acct-no=SELECT a1.stripe_acct_id FROM account a1 JOIN emailhash e1 ON a1.orig_email = e1.email WHERE e1.hash = ?;
fetch-all-blogs=SELECT blog_id, title, read_time, author, card_intro, create_date, image_card_link, image_card_alt, page_endpoint  FROM public.knocblogs ORDER BY blog_id;
fetch-blog-by-id=SELECT * FROM public.knocblogs WHERE blog_id = ? ORDER BY blog_id;
fetch-blog-rows=SELECT intro, new_row, section_left, section_left_end, subtitle, num_list_start, num_start_no, num_list_end, num_list_item, para_num, h2_h3, h2_subtitle, img, img_name, img_alt, img_sz, unorder_list_start, unorder_list_end, unorder_list_item, para FROM public.knocblog_row WHERE blog_id = ? ORDER BY para_num;
fetch-blog-refs=SELECT blog_id, reference FROM public.knocblog_resource WHERE blog_id = ?;
delete-user=DELETE FROM students WHERE uuid = ?;
delete-test-monkey=BEGIN; \
  DELETE FROM emailhash WHERE hash = ?; \
  DELETE FROM students WHERE username = ?; \
  DELETE FROM membershipfee WHERE orig_email = ?; \
  DELETE FROM person WHERE orig_email = ?; \
  DELETE FROM account WHERE orig_email = ?; \
COMMIT;
delete-predicessor-monkey=DELETE FROM predecessorchain WHERE user_hash = ?; 




