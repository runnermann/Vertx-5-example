#
#  Copyright (c) 2017 Red Hat, Inc. and/or its affiliates.
#  Copyright (c) 2017 INSA Lyon, CITI Laboratory.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# --------------------------------------------------------------------- #
#                   DATABASE PRINCIPLES OF ORGANIZATION
# --------------------------------------------------------------------- #
# We organize data for use in graphs and for normalized DB operations   #
# When it advantagous to use a graph for organization, we divide the data
# into things, e.g. certificates, programs, instituions, persons, students,
# etc... We create edges basad on relationships between things and other
# things. This is not strict. This is primarily on a many to one or many
# to many relationship. E.G. A certificate likely only has one institute
# that grants that certificate. This is a one to one relationship and is
# simply shown in the child thing. Where many people would be granted a
# certificate, then we create an edge such as Edge_cert_person. This is
# a many to one relationship.  

db-rollback=ROLLBACK;





insert-knocscore-donatetrx=INSERT INTO public.knockickdonated (stripe_trx_id, object, email, name, amount, status) VALUES (?,?,?,?,?,?);
select-prekick-metrics=SELECT k1.emailcount, k1.corporateCount, r1.amount \
    FROM (SELECT COALESCE(SUM(amount)) amount FROM knockickdonated) r1, \
    (SELECT COUNT(DISTINCT email) as emailcount, COUNT(*) FILTER (WHERE type != 'individual') as corporateCount FROM email_prekick_signup) k1;
select-prekick-backers=SELECT DISTINCT ON(e1.email) e1.email, k1.sum, e1.name, e1.employer, e1.type \
    FROM email_prekick_signup e1 FULL JOIN (SELECT DISTINCT ON (email) email, sum(amount) sum FROM knockickdonated GROUP BY email) k1 on e1.email = k1.email \
    WHERE e1.make_public = 'true';

fetch-members-list=SELECT hash, first_name, middle_name, last_name FROM person WHERE hash IS NOT NULL AND public_requested = true ORDER BY first_name;

fetch-all-jobs=SELECT job_id, job_position, employment_type, duration, job_location, remote FROM Job;
fetch-job-by-id=SELECT * FROM Job WHERE job_id = ?;
# FM website internal employee-team
fetch-team=SELECT DISTINCT Person.person_id, Person.first_name, Person.last_name, Person.photo_link, Person.descript, Employee.job_position \
  FROM Employee NATURAL JOIN Person WHERE employment_type = 'exec' \
  ORDER BY Person.person_id;

upsert-email-bounced=INSERT INTO public.email_tracking(email, bounced, note) \
    VALUES(?, ?, ?) ON CONFLICT (email) DO UPDATE SET bounced = ?, note = ?, date_response = CURRENT_TIMESTAMP;
upsert-email-opened=INSERT INTO public.email_tracking(email, opened, note) \
    VALUES(?, ?, ?) ON CONFLICT (email) DO UPDATE SET opened = ?, note = ?, date_response = CURRENT_TIMESTAMP;
upsert-email-complaint=INSERT INTO public.email_tracking(email, complaint, note) \
    VALUES(?, ?, ?) ON CONFLICT (email) DO UPDATE SET complaint = ?, note = ?, date_response = CURRENT_TIMESTAMP;
upsert-email-optout=INSERT INTO public.email_tracking(email, optout) \
    VALUES(?, ?) ON CONFLICT (email) DO UPDATE SET optout = ?, date_response = CURRENT_TIMESTAMP;
fetch-bulk-email-reqs=SELECT u1.email, s1.username	\
    FROM (((SELECT email FROM students s1) UNION (SELECT email FROM apprequest)) \
    EXCEPT (SELECT email FROM email_tracking)) AS u1 LEFT JOIN students s1 ON u1.email = s1.email;
fetch-emails-other=SELECT u1.email, s1.username \
    FROM (((SELECT email FROM emails_aquired s1) UNION (SELECT email FROM apprequest)) \
    EXCEPT (SELECT email FROM email_tracking)) AS u1 LEFT JOIN students s1 ON u1.email = s1.email;
fetch-emails-diff=SELECT DISTINCT ON (u1.email) u1.email, s1.username \
    FROM (((SELECT email FROM emails_aquired s1) UNION (SELECT email FROM apprequest)) \
    EXCEPT (SELECT email FROM email_tracking \
    WHERE bounced = true \
    OR optout = true)) AS u1 LEFT JOIN students s1 ON u1.email = s1.email \
    ORDER BY u1.email ASC;

fetch-all-blogs=SELECT blog_id, title, read_time, author, card_intro, create_date, image_card_link, image_card_alt, page_endpoint  FROM public.knocblogs ORDER BY blog_id;
fetch-blog-by-id=SELECT * FROM public.knocblogs WHERE blog_id = TO_NUMBER($1, '9s') ORDER BY blog_id;
fetch-blog-rows=SELECT intro, new_row, section_left, section_left_end, subtitle, num_list_start, num_start_no, num_list_end, \
  num_list_item, para_num, h2_h3, h2_subtitle, img, img_name, img_alt, img_sz, unorder_list_start, unorder_list_end, \
  unorder_list_item, para FROM public.knocblog_row WHERE blog_id = TO_NUMBER($1, '9s') ORDER BY para_num;
fetch-blog-refs=SELECT blog_id, reference FROM public.knocblog_resource WHERE blog_id = TO_NUMBER($1, '9s');
delete-user=DELETE FROM students WHERE uuid = ?;





